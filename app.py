import os
import sys
import signal
import asyncio
import logging
import threading
import multiprocessing

from flask import Flask
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –º–æ–¥—É–ª–∏
from config import BOT_TOKEN
from handlers import user, admin, callbacks
from database.db import init_db
from web_app_server import app as flask_app # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞
bot_process = None
bot_running = False

async def run_bot_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞."""
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher(storage=MemoryStorage())

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(user.router)
        dp.include_router(admin.router)
        dp.include_router(callbacks.router)

        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥. asyncio.run() —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç graceful shutdown.
        await dp.start_polling(bot)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def start_bot_process_target():
    """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    print("üßµ –ü—Ä–æ—Ü–µ—Å—Å Telegram –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥.
    # asyncio.run() —Å–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop.
    asyncio.run(run_bot_async())
    print("üõë –ü—Ä–æ—Ü–µ—Å—Å Telegram –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.")


def start_bot_process():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    global bot_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if bot_process is None or not bot_process.is_alive():
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å. Daemon=True –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç —É–±–∏—Ç,
        # –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
        bot_process = multiprocessing.Process(target=start_bot_process_target, daemon=True)
        bot_process.start()
        print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ —Å PID: {bot_process.pid}")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

def stop_bot_process():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞."""
    global bot_process
    if bot_process and bot_process.is_alive():
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞...")
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        bot_process.terminate()
        bot_process.join() # –ñ–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        print("üõë –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(signum, frame):
    print(f"\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    stop_bot_process()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


# --- –ì–õ–ê–í–ù–ê–Ø –ß–ê–°–¢–¨ ---
# –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ Gunicorn –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞—à –º–æ–¥—É–ª—å.
# –û–Ω –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ Gunicorn.

print("üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –±–æ—Ç–æ–º.
# –≠—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º (master) –ø—Ä–æ—Ü–µ—Å—Å–µ Gunicorn.
start_bot_process()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Gunicorn
app = flask_app

# –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
# (–Ω–∞–ø—Ä–∏–º–µ—Ä, python app.py), –Ω–æ –Ω–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ Gunicorn.
# –û–Ω –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, Gunicorn –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º.
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    print("üèÅ –ó–∞–ø—É—Å–∫ app.py –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")

    try:
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Gunicorn –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–º, –∞ –Ω–µ —ç—Ç–æ—Ç –∫–æ–¥.
        # –≠—Ç–æ—Ç –∫–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        port = int(os.environ.get('PORT', 8080))
        flask_app.run(debug=True, host="0.0.0.0", port=port, use_reloader=False)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        stop_bot_process()