from flask import Flask
import asyncio
import threading
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
import signal
import sys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –º–æ–¥—É–ª–∏
from config import BOT_TOKEN
from handlers import user, admin, callbacks
from database.db import init_db

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "üöÄ –ü–æ—á—Ç–æ–≤–æ–µ –ë—é—Ä–æ - —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω—ã!"

@flask_app.route('/health')
def health_check():
    return {"status": "healthy", "message": "Server is running"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
bot_thread = None
bot_running = False

async def run_bot():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞."""
    global bot_running
    if bot_running:
        print("ü§ñ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return

    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher(storage=MemoryStorage())

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(user.router)
        dp.include_router(admin.router)
        dp.include_router(callbacks.router)

        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        bot_running = True

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        bot_running = False
        print("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def start_bot_in_thread():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def run_bot_loop():
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —ç—Ç–æ–º loop
            loop.run_until_complete(run_bot())
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
    
    global bot_thread
    if bot_thread is None or not bot_thread.is_alive():
        bot_thread = threading.Thread(target=run_bot_loop, daemon=True)
        bot_thread.start()
        print("üßµ –ü–æ—Ç–æ–∫ Telegram –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω.")
    else:
        print("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

def stop_bot_thread():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞."""
    global bot_thread, bot_running
    if bot_thread and bot_thread.is_alive():
        bot_running = False
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É graceful shutdown –¥–ª—è –±–æ—Ç–∞

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@flask_app.before_first_request
def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."""
    print("üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
    start_bot_in_thread()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    print(f"\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    stop_bot_thread()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    print("üèÅ –ó–∞–ø—É—Å–∫ app.py...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ python app.py
    if len(sys.argv) == 1:  # –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ python
        start_bot_in_thread()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        try:
            flask_app.run(debug=False, host="0.0.0.0", port=4000, use_reloader=False)
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            stop_bot_thread()
    else:
        # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ Gunicorn, –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ before_first_request
        pass
